---
title: "Lecture 1.3 TEMPLATE"
subtitle: "`{ggplot2}` review"
author: "Your Name"
date: 2025-01-06
toc: true
---

::: {.callout-note}
This template follows [lecture 1.3 slides](https://eds-240-data-viz.github.io/course-materials/lecture-slides/lecture1.3-ggplot-review-slides.html#/title-slide){target="_blank}.
:::

## Setup

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
# load packages ----
library(tidyverse)
library(palmerpenguins)
```

## Tidy Data Review

Example untidy / wide data: 

```{r}
# create some untidy temperature data ----
temp_data_wide <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2,
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)

# print it out ----
print(temp_data_wide)
```

Using `pivot_longer()` to "lengthen" / tidy our data:

```{r}
# convert data from wide > long ----
temp_data_long <- temp_data_wide |> 
  pivot_longer(cols = starts_with("station"), #pick items that start with the word station
               names_to = "station_id", #put the column titles in their own column under station_id
               values_to = "temp_c") #put the actual values in their own column temp_c

# print it out ----
print(temp_data_long)
```

## Plot #1

Explore the relationship between penguin **bill length** and **bill depth**. Our goals are to review:

1. initializing a plot object and adding a geometry layer to represent our data
2. when to define data & map variables globally (e.g. within `ggplot()`) vs. locally (e.g. within a `geom_*()`)
3. updating how aesthetic mappings manifest visually aka scaling
4. piping into a ggplot

### Example 1 (the basics)

- initialize a plot object
- map aesthetics
- show that you can omit argument names
- add a geometry layer
- update how aesthetic mappings manifest visually (i.e. scaling)

```{r}
#| warning: false
# ~ CODE ALONG HERE ~

#INITIAL PLOT 
library(palmerpenguins) #loading in palmer penguins dataset
library(tidyverse)

ggplot(penguins,
       aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
         geom_point() +
  scale_color_gradient(low = "purple", high = "yellow")

#ADDING A SECOND LAYER 

# create a separate penguins_summary df ----
penguins_summary <- penguins |>
  drop_na() |> 
  group_by(species) |> 
  summarize(
    mean_bill_length_mm = mean(bill_length_mm),
    mean_bill_depth_mm = mean(bill_depth_mm)
  )

#adding a layer of the penguin summary data as a point file on top of the original 
ggplot() +
  geom_point(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm, color = species), alpha = 0.5) +
  geom_point(data = penguins_summary, mapping = aes(x = mean_bill_length_mm, y = mean_bill_depth_mm, fill = species),size = 5, shape = 24)
```

### Example 2 (mapping custom colors)

```{r}
#| warning: false
# ~ CODE ALONG HERE ~
```

### Example 3 (mapping color to continuous variable)

```{r}
#| warning: false
# ~ CODE ALONG HERE ~
```

### Example 4 (updating color for all points)

```{r}
#| warning: false
# ~ CODE ALONG HERE ~
```

### Example 5 (local vs. global data & variable mappings) 

- define data and mappings within `geom_*()` (locally) rather than in `ggplot()` (globally) -- helpful if you plan to include multiple geoms with different mappings (e.g. you're plotting data from multiple data frames):

```{r}
#| warning: false
#| message: false
# create a separate penguins_summary df ----
penguins_summary <- penguins |>
  drop_na() |> 
  group_by(species) |> 
  summarize(
    mean_bill_length_mm = mean(bill_length_mm),
    mean_bill_depth_mm = mean(bill_depth_mm)
  )

# create ggplot with layers from different dfs ----
# ~ CODE ALONG HERE ~
```

### Example 6 & 7 (mapping variables globally vs. locally)

- global mappings are passed down to all subsequent layers:

```{r}
#| warning: false
#| message: false
# scatterplot with lms fitted to species ---- 

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point() +
  geom_smooth(method = "lm")
```

- local mappings only apply to that particular layer:

```{r}
#| warning: false
#| message: false
# scatterplot with lm fitted to entire data set ---- 
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm")
```

### Example 8 (piping data into a ggplot)

- useful if you need to do a small bit of wrangling first, but don't want to create a whole new df

```{r}
#| warning: false
# filter for Gentoo penguins, then pipe into ggplot ----
#sounds like this is good for small filters not anything big 
penguins |>
  filter(species == "Gentoo") |> #filtering within the ggplot
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point() 
```

## Plot #2

Explore **penguin species counts**. Our goals are to review:

1. statistical transformations -- what are they, how to identify the default, and how to update them
2. position adjustments -- what are they, how to identify the default, and how to update them
3. coordinate systems -- what are they, how to identify the default, and how to update them    
4. updating non-data elements using pre-built themes and the `theme()` function

### Example 1 (the basics + default stat)

- initialize a plot object
- map aesthetics
- add a geometry layer
- explore default statistical transformations
  - reading documentation is important here!

```{r}
#| warning: false
ggplot(penguins, 
       aes(x= species)) +
  geom_bar() # default counts the number of species, not a value from our dataset specifically
```

### Example 2 (override default stat)

- let's say we have a df that already contains calculated species count values, and we want the height of the bars to be based on those count values: 

```{r}
#| warning: false

# new summarized df ----
penguin_summary <- penguins |> 
  count(species) 

# generate bar heights based on "identity" of values in `n` column ----
ggplot(penguin_summary, aes(x = species, y = n)) +
  geom_bar(stat = "identity")
```

### Example 3 (override default stat *mapping*)

- e.g. we can display the same data but with y-axis values as *proportions* rather than counts

```{r}
#| warning: false
ggplot(penguins, aes(x = species, y = after_stat(prop), group = 1)) +
  geom_bar()
  
#stat counts the number of occurrances in each category
#after_stat prop calculates the proportion of each species count relative to the total count 
#group = 1 proportions calculated across all species 
```

### Example 4 (default position adjustment)

- position adjustments tweak position of elements to resolve overlapping geoms
- all geoms have a default position (e.g. bar plots have `position = "stack"`) -- see documentation
- let's say we now want to visualize penguin counts by species (bar height) *and* by island (color):

```{r}
#| warning: false
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar()
```

### Example 5 & 6 (override default position adjustments)

- `position = "fill"` creates stacked bars of the same height (easier to compare proportions):

```{r}
#| warning: false
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "fill")
```

- `position = "dodge"` places overlapping bars directly beside one another (easier to compare individual values):

```{r}
#| warning: false
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar( position = "dodge")
```

### Example 7 (alternatively, use `position_*()`)

```{r}
#| warning: false
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = position_dodge2(preserve = "single"))
  
#makes sure the widths of bars are all equal
```

### Example 8 (default coordinate system)

```{r}
#| warning: false
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_cartesian()
```

### Example 9 & 10 (alternative coordinate systems)

- flip x & y axes:

```{r}
#| warning: false
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_flip() #flips horizontal 
```

- polar coordinates: 

```{r}
#| warning: false
# ~ CODE ALONG HERE ~
ggplot(penguins, aes(x = species)) +
  geom_bar() + 
  coord_polar()
```

### Example 11 (pre-made themes)

```{r}
#| warning: false
# ~ CODE ALONG HERE ~
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  theme_classic() #can also use theme_light()
```

### Example 12 (customize further with `theme()`)

```{r}
#| warning: false
#| 
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  theme_light() +
  theme(
    axis.title = element_text(size = 17, color = "purple")
  )
```

## Plot #3 

Explore **penguin flipper lengths**. Our goals are to review:

1. more position adjustments and scales
2. updating plot labels
3. faceting

### Example 1 (all in one go!)

- initialize a plot object
- map aesthetics
- add a geometry layer
- map color to species
- update position adjustment
- update labels
- facet by species

```{r}
#| warning: false
#| message: false
# ~ CODE ALONG HERE ~

ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram(position = "identity", alpha = 0.5) +
scale_fill_manual(values = c("darkorange", "purple", "cyan4"))+
labs(x = "Flipper length (mm)", y = "Frequency", fill = "Species",
       title = "Penguin Flipper Lengths") +
facet_wrap(~species, ncol = 1)

#notes
#alpha = transparency
#identity = stops the stacking and consolidates by species identity
```
