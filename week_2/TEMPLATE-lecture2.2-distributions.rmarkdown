---
title: "Lecture 2.2 TEMPLATE"
subtitle: "Visualizing distributions"
author: "Your Name"
date: 2025-01-13
toc: true
---



::: callout-note
This template follows [lecture 2.2 slides](https://eds-240-data-viz.github.io/course-materials/lecture-slides/lecture2.2-distributions-slides.html#/title-slide){target="\"_blank"}.
:::

## Setup

-   Find data & metadata on the [EDI Data Portal](https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-sbc&identifier=2007).
-   Get data download link by right-clicking on the **Download** button \> **Copy Link Address** \> then paste into `read_csv()`



```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(ggplot2)
library(chron)
library(naniar)
library(palmerpenguins) # for some minimal examples

#..........................import data...........................
mko <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.17&entityid=02629ecc08a536972dec021f662428aa")

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

mko_clean <- mko |>

  # keep only necessary columns ----
  select(year, month, day, decimal_time, Temp_bot, Temp_top, Temp_mid) |>

  # create datetime column (not totally necessary for our plots, but it can be helpful to know how to do this!) ----
  unite(date, year, month, day, sep = "-", remove = FALSE) |>
  mutate(time = chron::times(decimal_time)) |>
  unite(date_time, date, time, sep = " ") |>

  # coerce data types ----
  mutate(date_time = as_datetime(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"), 
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day)) |>

  # add month name by indexing the built-in `month.name` vector ----
  mutate(month_name = month.name[month]) |> 

  # replace 9999s with NAs ----
  naniar::replace_with_na(replace = list(Temp_bot = 9999, 
                                         Temp_top = 9999, 
                                         Temp_mid = 9999)) |>

  # select/reorder desired columns ----
  select(date_time, year, month, day, month_name, Temp_bot, Temp_mid, Temp_top)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            explore missing data                          ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........counts & percentages of missing data by year..........
see_NAs <- mko_clean |> 
  group_by(year) |> 
  naniar::miss_var_summary() |> #building a summary to see where the missing data is 
  filter(variable == "Temp_bot")

#...................visualize missing Temp_bot...................
bottom <- mko_clean |> select(Temp_bot)
missing_temps <- naniar::vis_miss(bottom) #from naniar package take the vis_miss function
```



## Histograms

-   represent distribution of a numeric variable(s), which is cut into several bins -- height of bar represents \# of observations in that bin
-   Bin Width: 30 bins by default
-   Bin Amount: can affect the interpretation of the graphic, need to consider

### Too many groups

*Note the message, to remind us to consider adjusting our `binwidth`*

Things To Change:

-   Months in Order: need to convert months from character strings into factor so we can set the order (factor function)

    -   Month.name = built in vector of all of the months in order, can put that into our levels to set how we want them to be ordered

-   Position:

    -   Identity: make everything differentiated by their identity

    -   Note: we are seeing it's hard to see what is happening with this because there are too many groups



```{r}
#| eval: true
#| echo: true

# histogram with all 12 months ----
mko_clean |>
  mutate(month_name = factor(month_name, levels = month.name)) |>
  ggplot(aes(x = Temp_bot, fill = month_name)) + #nothing needed on y because hist will do, color by month
  geom_histogram(position= "identity", alpha = 0.5)

#things to change from original - need to put months in order 
```



### Alt 1: small multiples

Purpose: meant to fix the problem of having too many groups

Solution: create a set of plots for each box, removed color to remove a visual distraction



```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false

# histogram faceted by month ----
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot)) +
  geom_histogram() +
  facet_wrap(~month_name) #split up our facets by month name  
```



### Alt 2: fewer groups + update colors + modify bin widths

Solution: remove as many groups and only look at representative months



```{r}
#| eval: true
#| echo: true
#| warning: false

# histogram with fewer months ----
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  filter(month_name %in% c("April", "June", "October")) |> #pick three represenative months 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5, binwidth = 1) + #picked one so each bar is 1 degree wide 
  scale_fill_manual(values = c("green", "blue", "purple"))
```



## Density plots

-   represent data distribution of a numeric variable(s); uses KDE to show probability density function of the variable, the y-axis represents the estimated density, i.e. the relative likelihood of a value occurring, and the area under each curve is equal to 1
-   Ideal Usage: shape of distribution of observations

### Too many groups - same group as histogram



```{r}
#| eval: true
#| echo: true
#| warning: false

# density plot with all 12 months ----
mko_clean |> 
  mutate(month_name = factor(x = month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(alpha = 0.5)
```



### Alt 1: small multiples



```{r}
#| eval: true
#| echo: true
#| warning: false

# density plot faceted by month ---- 
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot)) +
  geom_density(fill = "hotpink", color= "hotpink") +
  facet_wrap(~month_name)
```



### Alt 2: fewer groups + update colors + modify band widths

Band Width:

-   Smaller Band Width: more noise and curvature

-   Larger Band Width: smooths the curve out

-   Adjust: command to alter, 1 is the default - smaller means smaller band width



```{r}
#| eval: true
#| echo: true
#| warning: false

# density plot with fewer months; use these colors: c("#2C5374", "#ADD8E6", "#8B3A3A") ----
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(alpha = 0.5, adjust = 0.01) + #modifying bandwidth with the ADJUST command
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```



## A few more histograms & density plots

### Distinction: histograms vs. density plots

-   [Histogram]{.underline}: show FREQUENCY of values of values in each range represented by the height of bars

-   [Density]{.underline}: proportion of values in each range, peaks indicate where more values are concentrated but does not tell us anything about the number of observations



```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| layout-ncol: 2

# create some dummy data ----
dummy_data <- data.frame(value = c(rnorm(n = 100, mean = 5),
                                   rnorm(n = 200, mean = 10)),
                         group = rep(c("A", "B"),
                                     times = c(100, 200)))

# histogram ----
ggplot(dummy_data, aes(x = value, fill = group)) +
  geom_histogram(position = "identity", alpha = 0.7) +
  geom_rug(aes(color = group), alpha = 0.75)

# density plot ----
ggplot(dummy_data, aes(x = value, fill = group)) +
  geom_density(alpha = 0.7) +
  geom_rug(aes(color = group), alpha = 0.75)
```



### Combining geoms - SKIPPED IN CLASS



```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false

# histogram + density plot ----
ggplot(mko_clean, aes(x = Temp_bot)) +
  geom_histogram(fill = "gray", color = "black", alpha = 0.75) +
  geom_density(size = 1) 
```



### Compare groups to a whole - SKIPPED IN CLASS



```{r}
#| eval: true
#| echo: true
#| warning: false
# use `after_stat(count)` to plot density of observations ----
ggplot(penguins, aes(x = body_mass_g, y = after_stat(count))) +
 
  # plot full distribution curve with label "all penguins"; remove 'species' col so that this doesn't get faceted later on ----
  geom_density(data = select(penguins, -species), 
               aes(fill = "all penguins"), color = "transparent") +
  
  # plot second curve with label "species" ----
  geom_density(aes(fill = "species"), color = "transparent") +
  
  # facet wrap by species ----
  facet_wrap(~species, nrow = 1) +
  
  # update colors, x-axis label, legend position ----
  scale_fill_manual(values = c("grey","green4"), name = NULL) +
  labs(x = "Body Mass (g)") +
  theme(legend.position = "top")
```



## Ridgeline plots

-   show distribution of a numeric variable for multiple groups



```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| layout-ncol: 2

# basic ridgeline plot ----

ggplot(mko_clean, aes(x = Temp_bot, 
                      y = month_name, 
                      fill = after_stat(x))) +
  geom_density_ridges_gradient() +
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))

# fill with color gradient; use these colors: c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A") ----

```



### Alt 1: reorder groups + adjust overlap & tails



```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false

# ridgeline plot with reordered months ----
ggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, #helps chop off long data tails 
                                         scale = 3) +  #changes the overlap between the tails, higher values more overlap, lower values of scale less overlap  
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A")) +
  scale_y_discrete(limits = rev(month.name)) #reverse month name function to set the y axis
```



### Alt 2: add quantiles - SKIPPED IN CLASS



```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false

# ridgeline plot with quantiles ----
ggplot(mko_clean, aes(x = Temp_bot, y = month_name))
```



### Alt 3: jitter raw data - SKIPPED IN CLASS



```{r}
#| eval: true
#| echo: true
#| layout-col: 2
#| warning: false
#| message: false

# jittered points (and raincloud option) ----

```



## Boxplots

-   Purpose: good for quantiles

<!-- -->

-   *summarize* the distribution of a numeric variable for one or several groups



```{r}
#| eval: true
#| echo: true
#| warning: false

# boxplot with all 12 months ----

ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) + 
  coord_flip()
```



### Alt 1: modify outliers - SKIPPED IN CLASS



```{r}
#| eval: true
#| echo: true
#| warning: false

# boxplot with modified outliers ----
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) + 
  coord_flip()
```



### Alt 2: hightlight a group



```{r}
#| eval: true
#| echo: true
#| warning: false

# highlight a particular group ----
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) + 
  gghighlight(month_name =="October") + #having an issue with this rn, need to probably re-do installation when have a second 
  theme(legend.position = "none")
  coord_flip()
```



### Alt 3: jitter raw data (using `{palmerpenguins}` data) - TRY DOING FOR VAMSI



```{r}
#| eval: true
#| echo: true
#| warning: false

# add jittered data points ----
ggplot(palmerpenguins::penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot()
```



### Alt 4: dodged groups



```{r}
#| eval: true
#| echo: true
#| warning: false

# dodge groups by year ----
ggplot(palmerpenguins::penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot() +
  
```



### Alt 5: overlay beeswarm



```{r}
#| eval: true
#| echo: true
#| warning: false

# boxplot + beeswarm ----
ggplot(palmerpenguins::penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot(outlier.shape = NA) 
```



## Violin plots

-   visualize distribution of a numeric variable for one or several groups; great for multiple groups with lots of data



```{r}
#| eval: true
#| echo: true
#| warning: false

# violin plot ----
ggplot(mko_clean, aes(x = month_name, y = Temp_bot))
```



### Alt 1: overlay boxplot



```{r}
#| eval: true
#| echo: true
#| warning: false

# violin + boxplot ----
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_violin() +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
```



### Alt 2: half-violin half-dot plot



```{r}
#| eval: true
#| echo: true
#| warning: false

# half violin + half dot plot ----
```

